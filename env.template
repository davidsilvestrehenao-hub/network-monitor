# =====================================================
# PWA Connection Monitor - Environment Configuration
# =====================================================
# This file documents all environment variables used by the application.
# Copy this file to .env and fill in your actual values.
# NEVER commit .env files with real secrets to version control.
# =====================================================

# =====================================================
# CORE APPLICATION SETTINGS
# =====================================================

# Node environment (development, staging, production, test)
NODE_ENV=development

# Server configuration
PORT=3000
HOST=0.0.0.0

# Application metadata
APP_NAME="Network Monitor"
APP_VERSION="1.0.0"
APP_DESCRIPTION="Monitor your internet connection"

# =====================================================
# DATABASE CONFIGURATION (Factor IV: Backing Services)
# =====================================================

# Database connection string
# Development (PostgreSQL via Docker): postgresql://dev:dev@localhost:5432/network_monitor_dev
# Production: postgresql://user:password@host:5432/database
DATABASE_URL=postgresql://dev:dev@localhost:5432/network_monitor_dev

# Database pool settings (optional)
DATABASE_POOL_MIN=2
DATABASE_POOL_MAX=10

# =====================================================
# AUTHENTICATION & SECURITY
# =====================================================

# Auth secret for signing tokens (REQUIRED IN PRODUCTION)
# Generate with: openssl rand -base64 32
AUTH_SECRET=your-secret-key-here-change-in-production

# Auth URL (base URL for your application)
AUTH_URL=http://localhost:3000

# Enabled auth providers (comma-separated)
# Options: mock, github, google, email
AUTH_PROVIDERS=mock

# OAuth Provider Credentials (if using OAuth)
# GITHUB_CLIENT_ID=your-github-client-id
# GITHUB_CLIENT_SECRET=your-github-client-secret
# GOOGLE_CLIENT_ID=your-google-client-id
# GOOGLE_CLIENT_SECRET=your-google-client-secret

# =====================================================
# SERVICE CONFIGURATION
# =====================================================

# Enable/disable specific services (true/false)
MONITOR_SERVICE_ENABLED=true
ALERTING_SERVICE_ENABLED=true
NOTIFICATION_SERVICE_ENABLED=true

# Service-specific settings
SPEED_TEST_INTERVAL=30000          # Speed test interval in milliseconds (30 seconds)
# SPEED_TEST_URL=                  # Optional: Override download test URL (e.g., https://speed.hetzner.de/100MB.bin). Defaults to 10MB in non-prod, 100MB in prod.
ALERT_CHECK_INTERVAL=5000          # Alert check interval in milliseconds (5 seconds)
NOTIFICATION_BATCH_SIZE=50         # Number of notifications to send in batch

# =====================================================
# EVENT BUS CONFIGURATION (Factor IV: Backing Services)
# =====================================================

# Event bus type (in-memory, rabbitmq)
# Use in-memory for monolith deployment
# Use rabbitmq for microservices deployment
EVENT_BUS_TYPE=in-memory

# RabbitMQ connection string (if EVENT_BUS_TYPE=rabbitmq)
# Format: amqp://username:password@hostname:port
# RABBITMQ_URL=amqp://guest:guest@localhost:5672
# RABBITMQ_EXCHANGE=network-monitor-events
# RABBITMQ_QUEUE_PREFIX=network-monitor

# =====================================================
# LOGGING CONFIGURATION (Factor XI: Logs)
# =====================================================

# Log level (error, warn, info, debug)
LOG_LEVEL=info

# Log format (json, text)
# Use json for production (structured logging)
# Use text for development (human-readable)
LOG_FORMAT=json

# Enable/disable console logging
LOG_ENABLE_CONSOLE=true

# Enable/disable log timestamps
LOG_ENABLE_TIMESTAMPS=true

# =====================================================
# MONITORING & METRICS
# =====================================================

# Enable application metrics
ENABLE_METRICS=true

# Metrics server port
METRICS_PORT=9090

# Enable health check endpoint
ENABLE_HEALTH_CHECK=true

# Health check endpoint path
HEALTH_CHECK_PATH=/health

# =====================================================
# CACHING (if implemented)
# =====================================================

# Redis connection string (optional)
# REDIS_URL=redis://localhost:6379
# CACHE_TTL=3600                    # Cache TTL in seconds

# =====================================================
# EXTERNAL SERVICES (Factor IV: Backing Services)
# =====================================================

# Email service (if implemented)
# SMTP_HOST=smtp.example.com
# SMTP_PORT=587
# SMTP_SECURE=true
# SMTP_USER=user@example.com
# SMTP_PASSWORD=password

# Push notification service (optional)
# VAPID_PUBLIC_KEY=your-vapid-public-key
# VAPID_PRIVATE_KEY=your-vapid-private-key
# VAPID_SUBJECT=mailto:admin@example.com

# Webhook endpoint (optional)
# WEBHOOK_URL=https://example.com/webhook
# WEBHOOK_SECRET=your-webhook-secret

# =====================================================
# SERVICE WIRING (Dependency Injection)
# =====================================================

# Service wiring configuration file (which implementations to use)
# Default: Uses ${NODE_ENV}.json (e.g., development.json, production.json)
# 
# Available configurations:
#   Core:
#   - development: Real services, mock database (default for NODE_ENV=development)
#   - production: All real services (default for NODE_ENV=production)
#   - test: All mocks for testing (default for NODE_ENV=test)
#   - offline: Everything mocked for offline development
#   
#   Specialized:
#   - frontend-dev: Optimized for frontend developers (fast, mocked backend)
#   - integration-test: For integration testing (real event bus, mock data)
#   - ci: For CI/CD pipelines (fast, all mocked except services)
#   - demo: For product demos (rich mock data, real services)
#
# Examples:
#   SERVICE_WIRING_CONFIG=frontend-dev  # Frontend development
#   SERVICE_WIRING_CONFIG=offline       # Airplane coding
#   SERVICE_WIRING_CONFIG=demo          # Product demo
#
# SERVICE_WIRING_CONFIG=development

# =====================================================
# FEATURE FLAGS
# =====================================================

# Enable/disable features
ENABLE_MOCK_AUTH=true              # Use mock authentication (development only)
ENABLE_DEBUG_MODE=false            # Enable debug mode
ENABLE_MAINTENANCE_MODE=false      # Enable maintenance mode

# =====================================================
# RATE LIMITING (if implemented)
# =====================================================

# API rate limits
# RATE_LIMIT_WINDOW=900000          # 15 minutes in milliseconds
# RATE_LIMIT_MAX_REQUESTS=100       # Max requests per window
# AUTH_RATE_LIMIT_MAX_REQUESTS=5    # Max auth requests per window

# =====================================================
# DEVELOPMENT SETTINGS
# =====================================================

# Enable hot reload in development
ENABLE_HOT_RELOAD=true

# Enable source maps in development
ENABLE_SOURCE_MAPS=true

# Enable verbose logging in development
ENABLE_VERBOSE_LOGGING=false

# =====================================================
# DEPLOYMENT SETTINGS
# =====================================================

# Deployment environment identifier
DEPLOYMENT_ENV=local

# Deployment region (optional)
# DEPLOYMENT_REGION=us-west-2

# Enable auto-migrations on startup (use with caution)
AUTO_MIGRATE=false

# =====================================================
# TESTING SETTINGS
# =====================================================

# Test database URL (used in test environment)
# TEST_DATABASE_URL=postgresql://test:test@localhost:5432/network_monitor_test

# Enable test data seeding
# ENABLE_TEST_SEED=false

# =====================================================
# NOTES
# =====================================================
# 
# 12-Factor App Compliance:
# - All configuration is in environment variables (Factor III)
# - Backing services are attached resources (Factor IV)
# - No secrets in code or version control
# - Same config system for all environments
#
# Security Best Practices:
# - Always change AUTH_SECRET in production
# - Use strong passwords for database and services
# - Enable HTTPS in production (AUTH_URL should use https://)
# - Never commit .env files to version control
#
# Development Setup:
# 1. Copy this file to .env
# 2. Start backing services: docker-compose -f docker-compose.dev.yml up -d
# 3. Update DATABASE_URL to match your local PostgreSQL
# 4. Run migrations: bun run db:migrate
# 5. Start the application: bun run dev
#
# Production Setup:
# 1. Set all required environment variables in your hosting platform
# 2. Generate strong secrets for AUTH_SECRET and database passwords
# 3. Use managed database service for DATABASE_URL
# 4. Set LOG_FORMAT=json for structured logging
# 5. Enable metrics and health checks for monitoring
#
# =====================================================

