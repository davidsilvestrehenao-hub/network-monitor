---
description: 12-Factor App Methodology Compliance
globs: "**/*.{ts,tsx,js,jsx,json,md,yml,yaml}"
alwaysApply: true
type: Auto Attached
---

# 12-Factor App Methodology

The PWA Connection Monitor follows the [12-Factor App methodology](https://12factor.net/) for building modern, scalable, cloud-native SaaS applications. All code must comply with these principles.

## üìã Core Principles Summary

### I. Codebase ‚úÖ

- **One codebase tracked in revision control, many deploys**
- ‚úÖ Single Git repository with monorepo structure
- ‚úÖ Same codebase deployed to all environments

### II. Dependencies ‚úÖ

- **Explicitly declare and isolate dependencies**
- ‚úÖ All dependencies in `package.json`
- ‚úÖ Lock file (`bun.lock`) committed
- ‚úÖ No implicit system dependencies

### III. Config ‚ö†Ô∏è CRITICAL

- **Store config in the environment**
- ‚úÖ Use environment variables for ALL configuration
- ‚ùå NEVER store config in JSON files (except service discovery)
- ‚úÖ Never commit secrets to version control

**Required Pattern:**

```typescript
// ‚úÖ GOOD - Read from environment
const databaseUrl = process.env.DATABASE_URL;
const port = parseInt(process.env.PORT || "3000", 10);

// ‚ùå BAD - Read from JSON config
import config from "./config/production.json";
const databaseUrl = config.database.url;
```

### IV. Backing Services ‚úÖ

- **Treat backing services as attached resources**
- ‚úÖ Database abstracted through Prisma
- ‚úÖ Repository pattern isolates data access
- ‚úÖ Services configurable via environment variables

```typescript
// ‚úÖ GOOD - Backing service from environment
const prisma = new PrismaClient({
  datasources: {
    db: { url: process.env.DATABASE_URL },
  },
});

// ‚ùå BAD - Hardcoded backing service
const prisma = new PrismaClient({
  datasources: {
    db: { url: "postgresql://localhost:5432/mydb" },
  },
});
```

### V. Build, Release, Run ‚úÖ

- **Strictly separate build and run stages**
- ‚úÖ Build creates immutable artifacts
- ‚úÖ No compilation at runtime
- ‚úÖ Config injected at runtime

```bash
# ‚úÖ GOOD - Separate stages
bun run build        # Build stage
docker build         # Release stage
docker run           # Run stage

# ‚ùå BAD - Mixing stages
bun run build && bun run start  # Don't mix
```

### VI. Processes ‚úÖ

- **Execute the app as one or more stateless processes**
- ‚úÖ Services must be stateless
- ‚úÖ State stored in database, not memory
- ‚úÖ Horizontal scaling supported

```typescript
// ‚úÖ GOOD - Stateless service
class MonitorService {
  async getTarget(id: string) {
    return this.repository.findById(id); // From database
  }
}

// ‚ùå BAD - Stateful service
class MonitorService {
  private cache = new Map(); // ‚ùå In-memory state

  async getTarget(id: string) {
    return this.cache.get(id); // ‚ùå Won't work with multiple instances
  }
}
```

### VII. Port Binding ‚úÖ

- **Export services via port binding**
- ‚úÖ Self-contained HTTP servers
- ‚úÖ Port from environment variables

```typescript
// ‚úÖ GOOD - Port from environment
const PORT = process.env.PORT || 3000;
Bun.serve({ port: PORT });

// ‚ùå BAD - Hardcoded port
Bun.serve({ port: 3000 });
```

### VIII. Concurrency ‚úÖ

- **Scale out via the process model**
- ‚úÖ Scale by running multiple processes
- ‚úÖ Different service types for different workloads
- ‚úÖ Stateless design enables horizontal scaling

### IX. Disposability ‚ö†Ô∏è NEEDS IMPROVEMENT

- **Maximize robustness with fast startup and graceful shutdown**
- ‚úÖ Fast startup (< 3 seconds)
- ‚ö†Ô∏è Graceful shutdown needs improvement

**Required Pattern:**

```typescript
// ‚úÖ GOOD - Graceful shutdown
async function gracefulShutdown(signal: string) {
  console.log(`Received ${signal}, shutting down gracefully...`);

  // Stop accepting new requests
  server.close();

  // Complete in-flight requests
  await completeInFlightRequests();

  // Close database connections
  await database.disconnect();

  // Exit cleanly
  process.exit(0);
}

process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));
process.on("SIGINT", () => gracefulShutdown("SIGINT"));
```

### X. Dev/Prod Parity ‚ö†Ô∏è CRITICAL

- **Keep development, staging, and production as similar as possible**
- ‚ö†Ô∏è Use same database type (PostgreSQL) in all environments
- ‚ö†Ô∏è Use Docker Compose for backing services in development
- ‚úÖ Same code runs in all environments

**Required Setup:**

```yaml
# docker-compose.dev.yml - Development backing services
services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: network_monitor_dev
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
    ports:
      - "5432:5432"
```

```bash
# .env.development
DATABASE_URL=postgresql://dev:dev@localhost:5432/network_monitor_dev
```

### XI. Logs ‚ö†Ô∏è CRITICAL

- **Treat logs as event streams**
- ‚úÖ Write all logs to stdout/stderr
- ‚ùå NEVER write to log files
- ‚úÖ Use structured logging (JSON)

**Required Pattern:**

```typescript
// ‚úÖ GOOD - Stream to stdout
logger.info("Target created", {
  targetId: "target-123",
  userId: "user-456",
  timestamp: new Date().toISOString(),
});

// ‚ùå BAD - Write to files
winston.createLogger({
  transports: [
    new winston.transports.File({ filename: "error.log" }), // ‚ùå NO
  ],
});

// ‚úÖ GOOD - Console only
winston.createLogger({
  transports: [
    new winston.transports.Console({
      format: winston.format.json(), // Structured
    }),
  ],
});
```

### XII. Admin Processes ‚úÖ

- **Run admin/management tasks as one-off processes**
- ‚úÖ Admin scripts use same codebase
- ‚úÖ Same configuration as app

```bash
# ‚úÖ GOOD - One-off admin processes
bun run db:migrate
bun run db:seed
bun run db:reset
```

---

## üö® Critical Requirements

### Configuration (Factor III)

**NEVER store environment-specific configuration in code or JSON files.**

```typescript
// ‚ùå FORBIDDEN
const config = {
  database: {
    production: "postgresql://prod-server/db",
    development: "sqlite:./dev.db",
  },
};

// ‚úÖ REQUIRED
const databaseUrl = process.env.DATABASE_URL;
if (!databaseUrl) {
  throw new Error("DATABASE_URL environment variable is required");
}
```

### Environment Variables

All configuration must come from environment variables:

```bash
# Required environment variables
DATABASE_URL=postgresql://...
NODE_ENV=production
PORT=3000
LOG_LEVEL=info
AUTH_SECRET=...

# Service configuration
MONITOR_SERVICE_ENABLED=true
ALERTING_SERVICE_ENABLED=true
NOTIFICATION_SERVICE_ENABLED=true

# Event bus
EVENT_BUS_TYPE=rabbitmq
RABBITMQ_URL=amqp://...
```

### Logging (Factor XI)

**ALL logs must stream to stdout/stderr. NO file-based logging.**

```typescript
// ‚ùå FORBIDDEN
logger.addTransport(new FileTransport({ filename: "app.log" }));
fs.writeFileSync("error.log", error.message);

// ‚úÖ REQUIRED
console.log(JSON.stringify({ level: "info", message: "..." }));
logger.info("Event occurred", { data });
```

### Dev/Prod Parity (Factor X)

**Development and production must use the same backing services.**

```bash
# ‚ùå DISCOURAGED
# Development: SQLite
DATABASE_URL=file:./dev.db

# Production: PostgreSQL
DATABASE_URL=postgresql://prod/db

# ‚úÖ REQUIRED
# Development: PostgreSQL (via Docker)
DATABASE_URL=postgresql://localhost:5432/network_monitor_dev

# Production: PostgreSQL
DATABASE_URL=postgresql://prod-host:5432/network_monitor
```

---

## üìù Code Review Checklist

When reviewing or writing code, ensure:

- [ ] No configuration in JSON files (use environment variables)
- [ ] No secrets committed to version control
- [ ] All logs stream to stdout/stderr (no file logging)
- [ ] Services are stateless (no in-memory state)
- [ ] Graceful shutdown handlers implemented
- [ ] Port binding from environment variables
- [ ] Database connections from environment
- [ ] Same backing services in dev and prod
- [ ] Admin scripts use environment config

---

## üéØ Implementation Status

See `/docs/12-FACTOR-APP.md` for detailed compliance assessment and implementation roadmap.

**Current Status: 8/12 Fully Compliant**

**Priority Fixes:**

1. **Config (Factor III)** - Move to environment variables
2. **Dev/Prod Parity (Factor X)** - Use PostgreSQL in development
3. **Logs (Factor XI)** - Remove file-based logging
4. **Disposability (Factor IX)** - Improve graceful shutdown

---

## üìö Resources

- [The Twelve-Factor App](https://12factor.net/)
- [12-Factor Config in Different Languages](https://www.baeldung.com/ops/12-factor-app-methodology)
- [Cloud Native Computing Foundation Best Practices](https://www.cncf.io/)

---

Remember: **12-Factor principles are not optional. They are mandatory for building maintainable, scalable, cloud-native applications.**
