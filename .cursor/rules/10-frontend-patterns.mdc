---
type: Auto Attached
globs: "apps/web/src/{routes,components}/**/*.tsx"
description: Provides rules for building SolidStart frontend components.
alwaysApply: true
---

# Frontend Development Patterns

## 1. Core Principles

- **Framework:** All components must be written in SolidJS and SolidStart. Prioritize reactivity using `createSignal`, `createEffect`, and `<Suspense>`.
- **Styling:** All styling must be done using **Tailwind CSS** utility classes. Do not write custom CSS files.
- **DI & Services**: For complex client-side logic, use the frontend DI container (`packages/infrastructure/src/container/`) to access services. For simple cases, this is not necessary.

## 2. Data Flow & State Management

- **Primary Data Source**: All data from the backend **must** be fetched via the tRPC client.
- **tRPC Client**: A pre-configured, type-safe tRPC client is located at `apps/web/src/lib/trpc.ts`.
- **Data Fetching**: Use SolidJS's `createResource` to wrap calls to the tRPC client. This provides a declarative and reactive way to handle loading, error, and ready states.

```typescript
// âœ… Good: Using createResource with the tRPC client
import { createResource, Suspense } from "solid-js";
import { trpc } from "~/lib/trpc";

const Greeting = () => {
  const [greeting] = createResource(() => trpc.hello.query({ name: "tRPC" }));

  return (
    <Suspense fallback={<p>Loading...</p>}>
      <p>{greeting()}</p>
    </Suspense>
  );
};
```

- **State Management**: For local component state, use `createSignal`. For complex global state, a dedicated state management library (like Zustand or Nano Stores) could be used, but is not yet implemented.

## 3. Component Architecture

- **Charts**: All data visualization and charts must be implemented using `Chart.js` via the `solid-chartjs` library.
- **Type Safety**: Never use `any` types. Always provide proper TypeScript interfaces for props and state.
- **Error Handling**: Use Solid's `<ErrorBoundary>` component to catch errors within components. Use the logger service for logging errors to the console or a remote service.