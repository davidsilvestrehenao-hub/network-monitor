openapi: 3.1.3
info:
  title: Network Monitor API
  description: tRPC-based API for monitoring internet connections
  version: 1.0.0
  contact:
    name: Network Monitor
    url: https://github.com/your-org/network-monitor

servers:
  - url: http://localhost:3000/api/trpc
    description: Development server
  - url: https://api.network-monitor.com/api/trpc
    description: Production server

tags:
  - name: Health
    description: Health check endpoints
  - name: Targets
    description: Monitoring target management
  - name: Speed Tests
    description: Speed test operations
  - name: Alert Rules
    description: Alert rule management
  - name: Incidents
    description: Incident event management
  - name: Notifications
    description: Notification operations
  - name: Push Subscriptions
    description: Push notification subscriptions
  - name: Users
    description: User profile operations

paths:
  /hello:
    post:
      tags: [Health]
      summary: Health check
      operationId: hello
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string

  /targets.getAll:
    post:
      tags: [Targets]
      summary: Get all targets
      operationId: targets.getAll
      responses:
        '200':
          description: List of targets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Target'

  /targets.getById:
    post:
      tags: [Targets]
      summary: Get target by ID
      operationId: targets.getById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Target found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
        '404':
          description: Target not found

  /targets.create:
    post:
      tags: [Targets]
      summary: Create new target
      operationId: targets.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, address]
              properties:
                name:
                  type: string
                  minLength: 1
                address:
                  type: string
                  format: uri
      responses:
        '200':
          description: Target created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'

  /targets.update:
    post:
      tags: [Targets]
      summary: Update target
      operationId: targets.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id:
                  type: string
                name:
                  type: string
                  minLength: 1
                address:
                  type: string
                  format: uri
      responses:
        '200':
          description: Target updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'

  /targets.delete:
    post:
      tags: [Targets]
      summary: Delete target
      operationId: targets.delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Target deleted

  /targets.startMonitoring:
    post:
      tags: [Targets]
      summary: Start monitoring a target
      operationId: targets.startMonitoring
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [targetId, intervalMs]
              properties:
                targetId:
                  type: string
                intervalMs:
                  type: number
                  minimum: 1000
                  maximum: 300000
      responses:
        '200':
          description: Monitoring started
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  /targets.stopMonitoring:
    post:
      tags: [Targets]
      summary: Stop monitoring a target
      operationId: targets.stopMonitoring
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [targetId]
              properties:
                targetId:
                  type: string
      responses:
        '200':
          description: Monitoring stopped

  /targets.getActiveTargets:
    post:
      tags: [Targets]
      summary: Get list of actively monitored targets
      operationId: targets.getActiveTargets
      responses:
        '200':
          description: List of target IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /speedTests.getByTargetId:
    post:
      tags: [Speed Tests]
      summary: Get speed test results for target
      operationId: speedTests.getByTargetId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [targetId]
              properties:
                targetId:
                  type: string
                limit:
                  type: number
      responses:
        '200':
          description: Speed test results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpeedTestResult'

  /speedTests.getLatest:
    post:
      tags: [Speed Tests]
      summary: Get latest speed test result
      operationId: speedTests.getLatest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [targetId]
              properties:
                targetId:
                  type: string
      responses:
        '200':
          description: Latest result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeedTestResult'

  /speedTests.runTest:
    post:
      tags: [Speed Tests]
      summary: Run speed test immediately
      operationId: speedTests.runTest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [targetId, target]
              properties:
                targetId:
                  type: string
                target:
                  type: string
                  format: uri
                timeout:
                  type: number
      responses:
        '200':
          description: Speed test completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeedTestResult'

  /alertRules.getByTargetId:
    post:
      tags: [Alert Rules]
      summary: Get alert rules for target
      operationId: alertRules.getByTargetId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [targetId]
              properties:
                targetId:
                  type: string
      responses:
        '200':
          description: Alert rules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertRule'

  /alertRules.create:
    post:
      tags: [Alert Rules]
      summary: Create alert rule
      operationId: alertRules.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, targetId, metric, condition, threshold]
              properties:
                name:
                  type: string
                  minLength: 1
                targetId:
                  type: string
                metric:
                  type: string
                  enum: [ping, download]
                condition:
                  type: string
                  enum: [GREATER_THAN, LESS_THAN]
                threshold:
                  type: number
                  minimum: 0
                enabled:
                  type: boolean
      responses:
        '200':
          description: Alert rule created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertRule'

  /notifications.getUnread:
    post:
      tags: [Notifications]
      summary: Get unread notifications
      operationId: notifications.getUnread
      responses:
        '200':
          description: Unread notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'

  /notifications.markAsRead:
    post:
      tags: [Notifications]
      summary: Mark notification as read
      operationId: notifications.markAsRead
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id:
                  type: number
      responses:
        '200':
          description: Notification marked as read

components:
  schemas:
    Target:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
          format: uri
        ownerId:
          type: string

    SpeedTestResult:
      type: object
      properties:
        id:
          type: string
        targetId:
          type: string
        ping:
          type: number
          nullable: true
        download:
          type: number
          nullable: true
        upload:
          type: number
          nullable: true
        status:
          type: string
          enum: [SUCCESS, FAILURE]
        error:
          type: string
        timestamp:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    AlertRule:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        targetId:
          type: string
        metric:
          type: string
          enum: [ping, download]
        condition:
          type: string
          enum: [GREATER_THAN, LESS_THAN]
        threshold:
          type: number
        enabled:
          type: boolean

    Notification:
      type: object
      properties:
        id:
          type: number
        message:
          type: string
        sentAt:
          type: string
          format: date-time
        read:
          type: boolean
        userId:
          type: string

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session

security:
  - cookieAuth: []

