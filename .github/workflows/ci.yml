name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  quality-checks:
    name: Code Quality & Type Safety
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Cache Prisma Client
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('packages/database/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Generate Prisma Client
        run: cd packages/database && bunx prisma generate --schema=./prisma/schema.prisma

      - name: Check formatting (Prettier)
        run: bun run format:check
        
      - name: Lint (ESLint)
        run: bun run lint:check
        
      - name: Type check (TypeScript)
        run: bun run type-check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun test
        continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-build-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Cache Prisma Client
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('packages/database/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Generate Prisma Client
        run: cd packages/database && bunx prisma generate --schema=./prisma/schema.prisma

      - name: Build all packages
        run: bun run build
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN || '' }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM || '' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/*/dist
            packages/*/dist
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: bun pm audit
        continue-on-error: true

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [quality-checks, build]
    
    steps:
      - name: Post CI Summary
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## ✅ CI Checks Passed
            
            All automated checks have completed successfully:
            - ✅ Code formatting (Prettier)
            - ✅ Linting (ESLint)
            - ✅ Type checking (TypeScript)
            - ✅ Build verification
            - ✅ Security scan
            
            **Next Steps:**
            - Gemini Code Assist will review your PR automatically
            - You can also trigger a review with: \`/gemini review\`
            - Once approved, you can merge this PR
            
            ---
            *Powered by GitHub Actions CI*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

